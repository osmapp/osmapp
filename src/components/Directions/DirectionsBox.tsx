import styled from '@emotion/styled';
import { DirectionsAutocomplete } from './DirectionsAutocomplete';
import React, { useEffect, useState } from 'react';
import { Button, IconButton, Paper, Stack } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import SearchIcon from '@mui/icons-material/Search';
import { convertHexToRgba } from '../utils/colorUtils';
import { t } from '../../services/intl';
import { ModeToggler } from './ModeToggler';
import Router, { useRouter } from 'next/router';
import { usePersistedState } from '../utils/usePersistedState';
import { destroyRouting, handleRouting } from './utils';

const Wrapper = styled(Stack)`
  position: absolute;
  top: 8px;
  left: 8px;
  z-index: 10;
  width: 340px;
`;

const StyledPaper = styled(Paper)`
  backdrop-filter: blur(10px);
  background: ${({ theme }) =>
    convertHexToRgba(theme.palette.background.paper, 0.9)};
  padding: ${({ theme }) => theme.spacing(2)};
`;

// generated by https://v0.dev/chat/3MwraSQEqCc
export const DirectionsForm = () => {
  const [mode, setMode] = usePersistedState<string>('directions-mode', 'car');
  const [from, setFrom] = useState<string>('');
  const [to, setTo] = useState<string>('');

  const handleSearch = () => {
    if (!from || !to) {
      return;
    }

    const url = `/directions/${mode}/${from}/${to}`;
    Router.push(url);
    if (url === Router.asPath) {
      handleRouting(mode, from, to);
    }
  };

  const close = () => {
    Router.push('/');
  };

  return (
    <StyledPaper elevation={3}>
      <Stack direction="row" spacing={1} mb={2} alignItems="center">
        <ModeToggler value={mode} setMode={setMode} />
        <div style={{ flex: 1 }} />
        <div>
          <IconButton onClick={close} size="small" aria-label="close">
            <CloseIcon fontSize="small" />
          </IconButton>
        </div>
      </Stack>

      <Stack spacing={1} mb={3}>
        <DirectionsAutocomplete
          value={from}
          setValue={setFrom}
          label={t('directions.form.starting_point')}
        />
        <DirectionsAutocomplete
          value={to}
          setValue={setTo}
          label={t('directions.form.destination')}
        />
      </Stack>

      <Button
        variant="contained"
        fullWidth
        startIcon={<SearchIcon />}
        onClick={handleSearch}
      >
        {t('directions.get_directions')}
      </Button>
    </StyledPaper>
  );
};

export const DirectionsBox = () => {
  const router = useRouter();
  const [, mode, from, to] = router.query.all;

  useEffect(() => {
    handleRouting(mode, from, to);
    return () => {
      destroyRouting();
    };
  }, [from, mode, to]);

  return (
    <Wrapper spacing={1}>
      <DirectionsForm />
    </Wrapper>
  );
};
