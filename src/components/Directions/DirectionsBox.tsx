import styled from '@emotion/styled';
import {
  DirectionsAutocomplete,
  getOptionToLonLat,
} from './DirectionsAutocomplete';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Button, IconButton, Stack } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import SearchIcon from '@mui/icons-material/Search';
import { t } from '../../services/intl';
import { ModeToggler } from './ModeToggler';
import Router, { useRouter } from 'next/router';
import {
  destroyRouting,
  getLastMode,
  handleRouting,
} from './routing/handleRouting';
import { getLabel } from '../../helpers/featureLabel';
import { getLastFeature } from '../../services/lastFeatureStorage';
import { Result, StyledPaper } from './Result';
import { buildUrl, getStarOption, Option, parseUrlParts } from './utils';
import { Profile, RoutingResult } from './routing/types';
import { useBoolState, useMobileMode } from '../helpers';

const Wrapper = styled(Stack)`
  position: absolute;
  top: 8px;
  left: 8px;
  z-index: 1001; // over the LayerSwitcherButton
  width: 340px;
`;

const useReactToUrl = (
  setMode: (param: ((current: string) => string) | string) => void,
  setFrom: (value: Option) => void,
  setTo: (value: Option) => void,
  setResult: (result: RoutingResult) => void,
) => {
  const initialModeWasSet = useRef(false);
  const router = useRouter();
  const urlParts = router.query.all;

  useEffect(() => {
    const [, mode, ...points] = urlParts as [string, Profile, ...string[]];
    const options = parseUrlParts(points);

    if (mode && options.length === 2) {
      setMode(mode);
      setFrom(options[0]);
      setTo(options[1]);
      handleRouting(mode, options.map(getOptionToLonLat)).then(setResult);
    } else {
      if (initialModeWasSet.current === false && getLastMode()) {
        setMode(getLastMode());
        initialModeWasSet.current = true;
      }

      const lastFeature = getLastFeature();
      if (lastFeature) {
        setTo(getStarOption(lastFeature.center, getLabel(lastFeature)));
      }
    }

    return () => {
      destroyRouting();
    };
  }, [urlParts, setMode, setFrom, setTo, setResult]);
};

const useGetOnSubmit = (
  from: Option,
  to: Option,
  mode: Profile,
  setResult: (result: RoutingResult) => void,
) => {
  return () => {
    if (!from || !to) {
      return;
    }
    const points = [from, to];
    const url = buildUrl(mode, points);
    if (url === Router.asPath) {
      handleRouting(mode, points.map(getOptionToLonLat)).then(setResult);
    } else {
      Router.push(url);
    }
  };
};

type Props = {
  setResult: (result: RoutingResult) => void;
  hideForm: boolean;
};

// generated by https://v0.dev/chat/3MwraSQEqCc
export const DirectionsForm = ({ setResult, hideForm }: Props) => {
  const [mode, setMode] = useState<Profile>();
  const [from, setFrom] = useState<Option>();
  const [to, setTo] = useState<Option>();

  useReactToUrl(setMode, setFrom, setTo, setResult);
  const onSubmit = useGetOnSubmit(from, to, mode, setResult);

  const close = () => {
    Router.push('/');
  };

  if (hideForm) {
    return null;
  }

  return (
    <StyledPaper elevation={3}>
      <Stack direction="row" spacing={1} mb={2} alignItems="center">
        <ModeToggler value={mode} setMode={setMode} />
        <div style={{ flex: 1 }} />
        <div>
          <IconButton onClick={close} size="small" aria-label="close">
            <CloseIcon fontSize="small" />
          </IconButton>
        </div>
      </Stack>

      <Stack spacing={1} mb={3}>
        <DirectionsAutocomplete
          value={from}
          setValue={setFrom}
          label={t('directions.form.starting_point')}
        />
        <DirectionsAutocomplete
          value={to}
          setValue={setTo}
          label={t('directions.form.destination')}
        />
      </Stack>

      <Button
        variant="contained"
        fullWidth
        startIcon={<SearchIcon />}
        onClick={onSubmit}
      >
        {t('directions.get_directions')}
      </Button>
    </StyledPaper>
  );
};

export const DirectionsBox = () => {
  const isMobileMode = useMobileMode();
  const [result, setResult] = useState<RoutingResult>(null);
  const [revealed, revealForm, hide] = useBoolState(false); // mobile only
  const hideForm = isMobileMode && result && !revealed;

  const setResultAndHide = useCallback(
    (result: RoutingResult) => {
      setResult(result);
      hide();
    },
    [hide],
  );

  return (
    <Wrapper spacing={1}>
      <DirectionsForm setResult={setResultAndHide} hideForm={hideForm} />
      {result && (
        <Result result={result} revealForm={!revealed && revealForm} />
      )}
    </Wrapper>
  );
};
