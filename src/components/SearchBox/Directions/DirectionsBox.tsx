import styled from '@emotion/styled';
import { DirectionsAutocomplete } from './DirectionsAutocomplete';
import React from 'react';
import { Button, IconButton, Paper, Stack } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import SearchIcon from '@mui/icons-material/Search';
import { convertHexToRgba } from '../../utils/colorUtils';
import { t } from '../../../services/intl';
import { ModeToggler } from './ModeToggler';
import { fetchJson } from '../../../services/fetch';
import { getGlobalMap } from '../../../services/mapStorage';

const StyledPaper = styled(Paper)`
  position: absolute;
  top: 8px;
  left: 8px;
  z-index: 10;
  padding: ${({ theme }) => theme.spacing(2)};
  width: 340px;
  backdrop-filter: blur(10px);
  background: ${({ theme }) =>
    convertHexToRgba(theme.palette.background.paper, 0.9)};
`;

type Props = {
  toggleDirections: () => void;
};


const profiles = {
  car: 'car-fast',
  bike: 'trekking',
  walk: 'hiking-mountain',
  rail: 'rail',
  river: 'river'
}

const useGetHandleSearch = (from:string, to: string, mode: string) => {
  return async () => {
    const profile = profiles[mode];
    const url = `https://brouter.de/brouter?lonlats=${from}|${to}&profile=${profile}&alternativeidx=0&format=geojson`
    const geojson = await fetchJson(url);
    console.log(geojson);

    const id = Math.random().toString(36).substring(7);
    const map = getGlobalMap();

    map.addSource(id, {
      type: 'geojson',
      data: geojson,
      lineMetrics: true,
    })

    const linestringFilter = ['all', ['in', '$type', 'LineString']]
    map.addLayer(
      {
        id: id + 'Line',
        type: 'line',
        source: id,
        layout: {
          'line-join': 'round',
          'line-cap': 'round',
        },
        paint: {
          walking: {
            'line-color': '#8f53c1',
            'line-width': 5,
            // I'm bricoling something here but I don't understand yet how it
            // works precisely
            'line-dasharray': {
              stops: [
                [0, [10, 2]],
                [10, [3, 2]],
                [16, [0.6, 2]],
              ],
            },
          },
          distance: {
            'line-width': 0,
          },
          car: {
            'line-width': 3,
            'line-color': 'IndianRed',
          },
          cycling: {
            'line-color': '#57bff5',
            'line-width': 2,
            ...(id === 'cycling'
              ? {
                'line-gradient': [
                  'interpolate',
                  ['linear'],
                  ['line-progress'],
                  // ...computeSlopeGradient(geojson),
                ],
              }
              : {}),
          },
        }[id],
        filter: linestringFilter,
      },
      'distance' + 'Points'
    )

    // const bbox = getBbox(geojson)
    //
    // if (
    //   geojson.features.filter(
    //     (f) => f.geometry.type === 'Point' && f.properties.key != null
    //   ).length > 1
    // ) {
    //   const large = height < width,
    //     padding = large
    //       ? { left: width / 4, right: width / 4 }
    //       : { left: 10, right: 10 }
    //
    //   map.fitBounds(bbox, { padding })
    // }



    console.log('Search for', from, to, mode);
  };
};

// generated by https://v0.dev/chat/3MwraSQEqCc
export const DirectionsBox = ({ toggleDirections }: Props) => {
  const [from, setFrom] = React.useState<string>('');
  const [to, setTo] = React.useState<string>('');
  const [mode, setMode] = React.useState<string>('car');
  const handleSearch = useGetHandleSearch(from, to, mode);

  return (
    <StyledPaper elevation={3}>
      <Stack direction="row" spacing={1} mb={2}>
        <ModeToggler value={mode} setMode={setMode} />
        <IconButton onClick={toggleDirections} size="small" aria-label="close">
          <CloseIcon fontSize="small" />
        </IconButton>
      </Stack>

      <Stack spacing={1} mb={3}>
        <DirectionsAutocomplete
          setValue={setFrom}
          label={t('directions.form.starting_point')}
        />
        <DirectionsAutocomplete
          setValue={setTo}
          label={t('directions.form.destination')}
        />
      </Stack>

      <Button
        variant="contained"
        fullWidth
        startIcon={<SearchIcon />}
        onClick={handleSearch}
      >
        {t('directions.get_directions')}
      </Button>
    </StyledPaper>
  );
};
